// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/players": {
            "get": {
                "description": "Returns a list of players",
                "tags": [
                    "player"
                ],
                "summary": "Get All Players",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Player"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "put": {
                "description": "Updates a  player's name by his id and returns it",
                "tags": [
                    "player"
                ],
                "summary": "Update Player Name",
                "parameters": [
                    {
                        "description": "id to find the player",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Name assigned to update the player",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Player"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new player and returns it with his id",
                "tags": [
                    "player"
                ],
                "summary": "Create Player",
                "parameters": [
                    {
                        "description": "Name assigned to the new player",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Player"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a  player by his id",
                "tags": [
                    "player"
                ],
                "summary": "Delete Player",
                "parameters": [
                    {
                        "description": "id to find and delete the Player",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Player"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/players/{:id}": {
            "get": {
                "description": "Returns a player requested by his id",
                "tags": [
                    "player"
                ],
                "summary": "Get Player By Id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id needed to found the player",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Player"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/queues": {
            "get": {
                "description": "Returns a list of queues",
                "tags": [
                    "queue"
                ],
                "summary": "Get All Queues",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Queue"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "put": {
                "description": "Updates a  queue's name by his id and returns it",
                "tags": [
                    "queue"
                ],
                "summary": "Update Queue Name",
                "parameters": [
                    {
                        "description": "id to find the queue",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Name assigned to update the queue",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Queue"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new queue and returns it with his id. It cannot create more than the value specified on config.json: \"max_queues\"",
                "tags": [
                    "queue"
                ],
                "summary": "Create Queue",
                "parameters": [
                    {
                        "description": "Name assigned to the new player",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Value assigned to limit the payers in this queue. Predet: 2",
                        "name": "max_players",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Queue"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a queue by his id",
                "tags": [
                    "queue"
                ],
                "summary": "Delete Queue",
                "parameters": [
                    {
                        "description": "id to find and delete the queue",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Queue"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/queues/{:id}": {
            "get": {
                "responses": {}
            }
        },
        "/api/queues/{:status}": {
            "get": {
                "description": "Returns a list of sessions requested by his status: opened or closed",
                "tags": [
                    "session"
                ],
                "summary": "Get a list of sessions by status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Id needed to found the sessions",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Session"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/api/sessions": {
            "get": {
                "description": "Returns a list of sessions",
                "tags": [
                    "session"
                ],
                "summary": "Get All Sessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Session"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "put": {
                "description": "Updates the session adding a new Player. Returns the ID of the game session and the related data",
                "tags": [
                    "session"
                ],
                "summary": "Update Session with a new Player",
                "parameters": [
                    {
                        "description": "id to find the asociated queue",
                        "name": "queue",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Name assigned to update the queue",
                        "name": "name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Session"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a Session with one Player and an asociated queue. Returns the ID of the game session and the related data",
                "tags": [
                    "session"
                ],
                "summary": "Create a Session",
                "parameters": [
                    {
                        "description": "an Id to find the asociated queue",
                        "name": "queue",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "an Id to add a player",
                        "name": "player",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Session"
                        }
                    },
                    "400": {
                        "description": "error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Player": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Queue": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "maxPlayers": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Session": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "player": {
                    "type": "string"
                },
                "queue": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Survivor Battle Royale API",
	Description:      "A testing project fot BlackMouth. Made with Golang & Gin",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
